#!/bin/bash -e

SCRIPTS_DIR="$(readlink -f $(dirname $0)/../scripts)"

. $SCRIPTS_DIR/utils.sh
$IN_DOCKER || error "This script must be run in a Docker container"

# Source scripts
ddebug "Sourcing include scripts"
for script in architecture docker sbuild distcc distro debian-pkg-repo; do
    ddebug "    Sourcing ${script}.sh"
    . $SCRIPTS_DIR/${script}.sh
done

# Init variables
. $SCRIPTS_DIR/base-config.sh

# Source distro, repo and package configs
distro_read_all_configs
repo_read_all_configs

# Source optional config override file
if test -f $BASE_DIR/local-config.sh; then
    debug "    Sourcing local config"
    . $BASE_DIR/local-config.sh
fi

# Set up Docker container
docker_setup

usage() {
    test -z "$1" || msg "$1"
    msg "Usage:"
    msg "  Run command or start shell in chroot:"
    msg "    $0 [-s] [ option ... ] distro [ command [ args ...] ]"
    msg "      -U:           Run shell as user (default root)"
    msg "  Build chroot image:"
    msg "    $0 -i [ option ... ] distro"
    msg "      -n:           No package install; configure existing chroot only"
    msg "  general options:"
    msg "      -a arch:      Use chroot for specified arch"
    msg "      -u UID:       Use user ID UID for non-root operations"
    msg "      -d:           Print verbose debug output"
    msg "      -dd:          Print extra verbose debug output"
    exit 1
}

MODES=" "

# Process command line opts
declare -a ARG_LIST  # For saving modified command line opts
test -n "$DOCKER_UID" || DOCKER_UID=0
HOST_ARCHES=""
RUN_AS_USER=false
BUILD_SCHROOT_SKIP_PACKAGES=false
while getopts isna:u:Ud ARG; do
    ARG_LIST+=("-$ARG" ${OPTARG:+"$OPTARG"})
    case $ARG in
	# modes
	i) MODES+="BUILD_SBUILD_CHROOT " ;;
	s) MODES+="SBUILD_SHELL " ;;
	# options
	n) BUILD_SCHROOT_SKIP_PACKAGES=true ;;
	a) HOST_ARCHES="$HOST_ARCHES $(uncomma $OPTARG)" ;;
	# general options
	u) DOCKER_UID=$OPTARG ;;
	U) RUN_AS_USER=true ;;
	d) $DEBUG && DDEBUG=true || DEBUG=true ;;
        *) usage
    esac
done
shift $((OPTIND-1))

# User
ARG_LIST+=(-u $DOCKER_UID)

# Save non-option args before mangling
ARG_LIST+=("$@")

DISTRO="$1"; shift || true
template_add_sub DISTRO

declare -a OTHER_ARGS=("$@")

# Run shell by default
modes || MODES=" SBUILD_SHELL "
arch_check $HOST_ARCHES || usage "Valid arches:  $ARCHES"
test -n "$DISTRO" || usage "No distro(s) specified"

# Debug
! $DDEBUG || set -x

# Set default arch if needed
HOST_ARCH=${HOST_ARCH:-$(arch_default $DISTRO)}
template_add_sub HOST_ARCH
BUILD_ARCH=$HOST_ARCH
template_add_sub BUILD_ARCH

case "$MODES" in
    *" BUILD_SBUILD_CHROOT "*)
	foreach_arch sbuild_chroot_setup
	;;

    *" SBUILD_SHELL "*)
	sbuild_shell
	;;
esac
